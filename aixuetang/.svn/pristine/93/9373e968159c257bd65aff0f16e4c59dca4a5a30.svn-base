package com.sxt.order.dao;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.MapListHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;

import com.po.Address;
import com.sxt.order.domain.Order;
import com.sxt.util.DBUtil;

import cn.itcast.commons.CommonUtils;

public class OrderDao {
	private QueryRunner qr =new QueryRunner();
	private Connection conn =DBUtil.getConnection();
	
	//对t_order 和t_address连表查询, 把单行的map记录映射为含有完整Address的Order对象的方法
	private Order toOrder(Map<String, Object> map){
		if(map ==null || map.size()==0) return null;
		Order order =CommonUtils.toBean(map, Order.class);
		Address address =CommonUtils.toBean(map, Address.class);
		order.setAddr(address);
		return order;
	}
	
	//对t_order 和t_address连表查询, 把单行的map记录映射为含有完整Address的Order对象的方法
	private List<Order> toOrderList(List<Map<String, Object>> mapList){
		List<Order> orderList =new ArrayList<>();
		for(Map<String, Object> map :mapList){
			Order order =toOrder(map);
			orderList.add(order);
		}
		return orderList;
	}
	
	//分页用, 查询当前用户的总记录数
	public long getTotalCount(Integer uid) throws SQLException {
		String sql ="select count(1) from t_order where uid=?";
		Number number =(Number)qr.query(conn, sql, new ScalarHandler(), uid);
		return number.longValue();
	}

	/**
	 * 前台查询所有订单, 根据分页信息(pageNum当前页, pageSize每个记录数)查询的 Order集合
	 * @param uid
	 * @param pageNum
	 * @param pageSize
	 * @return
	 * @throws SQLException
	 */
	public List<Order> showOrder(Integer uid, Integer pageNum, Integer pageSize) throws SQLException {
		String sql ="select orderid, ordertime, status, total, a.* FROM "+
					"t_order o LEFT JOIN t_address a on o.aid =a.aid "+
					"where o.uid=? limit ?,?";
		List<Map<String, Object>> mapList =qr.query(conn, sql, new MapListHandler(), uid, 
				pageSize*(pageNum-1), pageSize);
		return toOrderList(mapList);
	}
}
